#+TITLE: Nice Org to HTML pipeline
#+AUTHOR: Ewan Townshend
#+OPTIONS: ^:nil toc:3 num:nil

* tl;dr
This package generates prettier, responsive websites from .org files and Emacs themes. You can optionally specify a header, footer, and additional CSS and JS to be included. To see the default output, for my chosen themes and with no header, footer or extras, view this README in your browser [[https://etown.dev/nice-org-html/][here]]. If you're already there, you can find the GitHub repo [[https://github.com/ewantown/nice-org-html][here]].

To see an example with a basic header and footer, see this [[https://www.etown.dev/nice-org-html/sample][sample]].

* About this package
 This package defines an Emacs pipeline for [[https://orgmode.org/manual/Exporting.html][exporting]] Org files, or [[https://www.gnu.org/software/emacs/manual/html_node/org/Publishing.html][publishing]] Org projects, to HTML. The generated HTML is optimized for readability and responsiveness, esp. of documents that include code. The pipeline enables easy customization by users, leveraging the variety of themes already defined for Emacs. This is achieved by:

1. Extracting colors from user-specified themes, inserting these in a CSS template (nice-org-html.css), and injecting the result into a ~<style>~ element. 
2. Inserting toggle-buttons for light- and dark-mode viewing, and a click-to-jump table-of-content view, governed by the included scripts (nice-org-html.js).
3. Extending the default org-to-html export backend to include copy-to-clipboard buttons for source blocks.
4. Injecting optional, user-defined HTML header and footer, CSS styling and JS scripts.

* How to use it
+ Obtain the source files and add them to your load path. I prefer MELPA and use-package:
  #+begin_src emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/"))
    (package-initialize)
    
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
  #+end_src
  
+ Add something like this to your configuration file:
  #+begin_src emacs-lisp
    (use-package nice-org-html
      :hook (org-mode . nice-org-html-mode)
      :config
      (setq nice-org-html-theme-alist
            '((light . solo-jazz)
              (dark  . tomorrow-night-eighties)))
      (setq nice-org-html-default-mode 'dark)
      (setq nice-org-html-headline-bullets nil))
  #+end_src
+ Note, if values for these variables are not specified, the default view mode will be ~'dark~, the mode-associated themes will be the "tsdh-" themes distributed with GNU Emacs, and bullet marks will /not/ be prefixed to headlines.
  + To prefix headlines with the default bullets, instead use:
    #+begin_src emacs-lisp
      (setq nice-org-html-headline-bullets t)
    #+end_src    
  + Or you can specify headline bullets with a plist like this (the defaults):
    #+begin_src emacs-lisp
      (setq nice-org-html-headline-bullets
            '(:h1 "◉" :h2 "✸" :h3 "▷" :h4 "⦁" :h5 "○"))
    #+end_src

    
+ After loading this package and hooking nice-org-html-mode to org-mode, when you open an Org buffer, nice-org-html-mode will activate.

+ If you then interactively export your Org buffer via the dispatcher (C-c C-e), you will be presented with options to export to 'nice HTML', in addition to the basic HTML export options.

+ When exporting to 'nice HTML', you will be prompted for (optional) header, footer, CSS, and JS filepaths. If specified, the contents of those files will be injected, accordingly, into the generated HTML. 

+ These variables may also be set globally, and then used or overridden during interactive export. For example:

  #+begin_src emacs-lisp
    (setq nice-org-html-header "path/to/your/header.html")

    (setq nice-org-html-footer "path/to/your/footer.html")

    (setq nice-org-html-css "path/to/your/style.css")

    (setq nice-org-html-js "path/to/your/script.js")
  #+end_src

+ This package is particularly well-suited to /publishing/ Org /projects/, as websites comprised of many linked pages. The included publishing function, ~nice-org-html-publish-to-html~, relies on global values for all of the above variables. To use it, in specifying the value of ~org-publish-projects-alist~, for a given project just specify:

  #+begin_src emacs-lisp
    ;; ...
    :publishing-function #'nice-org-html-publish-to-html
    ;; ...
  #+end_src

+ For more granular per-project configuration, there is a publishing-function-generating macro, ~nice-org-html-make-publishing-function~, which takes values for all of the above configuration variables, and defines-then-returns a publishing function unique to that invocation. For example, your per-project configuration - i.e. the value of ~org-publish-projects-alist~ - may look something like this:
  
  #+begin_src emacs-lisp
    `(("project-x/files"
       :base-extension "org"
       :base-directory "path/to/source-x/"       
       :publishing-directory "path/to/target-x/"
       ;; ...
       :publishing-function
       ,(nice-org-html-make-publishing-function
         '((light . solo-jazz) (dark . tomorrow-night-eighties))
         'dark
         '(:h1 "" :h2 "✸" :h3 "▷" :h4 "" :h5 "")
         "path/to/your/header.html"
         "path/to/your/footer.html"
         "path/to/your/style.css"
         "path/to/your/script.js")))
  #+end_src

* Things to keep in mind
+ The HTML specified by ~nice-org-html-header~ and ~nice-org-html-footer~ will inherit the package default styling, unless further styling for these is defined in the file specified by ~nice-org-html-css~.
+ For easy CSS customization, the contents of each user-specified HTML file are wrapped together in a ~<div>~ element; with id = 'injected-header' and id = 'injected-footer', respectively, and both with class = 'injected'.
+ The CSS specified by ~nice-org-html-css~ may also use the CSS variables defined in nice-org-html.css, which ultimately refer to Emacs face attribute values determined by your chosen themes.
+ The CSS specified by ~nice-org-html-css~ may override the default styling.
+ You can specify ~""~ as the bullet for a headline level to omit bullets for that level.

* Credits
+ Shi Tianshu's [[https://github.com/DogLooksGood/org-html-themify?tab=readme-ov-file][org-html-themify]] provided the basic model for CSS interpolation.
+ Various stackoverflow posts were of great help, but alas, I've lost the links.
